#! /usr/bin/env python

import roslib; roslib.load_manifest('messages')
import rospy
import actionlib
import ig_action_msgs.msg
from gazebo_msgs.msg import ModelStates
from tf import TransformListener

import sys
import traceback
import time
import threading

class ChallengeProblemLogger(object):
  _placedObstacle = False
  _lastgzlog = 0.0
  _tf_listener = None
  
  def __init__(self,name):
    self._name = name;

    self._experiment_started = False
    self._tf_listener = TransformListener()

    #self._logFile = open(monitors.DATA_FOLDER + logFilename, "w", 0)

    # Subscribe to robot pose ground truth from gazebo
    rospy.Subscriber("/gazebo/model_states", ModelStates, callback=self.gazebo_model_monitor,
                     queue_size=1)
    #rospy.Subscriber("/ig_action_server/goal", 
    #self._igClient = actionlib.ActionClient("ig_action_server",

  def gazebo_model_monitor(self, data):
    if (len(data.pose))<=2:
      return
    data_time = rospy.get_rostime().to_sec()
    if ((self._lastgzlog == 0.0) | (data_time - self._lastgzlog >= 1)):

     
      tb_pose = data.pose[2]
      tb_position = tb_pose.position
      self._lastgzlog = data_time

      if self._tf_listener.frameExists("/base_link") and self._tf_listener.frameExists("/map"):
        self._tf_listener.waitForTransform("/map", "/base_link", rospy.Time(0), rospy.Duration(1))
        (trans,rot) = self._tf_listener.lookupTransform("/map", "/base_link",rospy.Time(0))
        rospy.loginfo("BRASS | Turtlebot | {},{}".format(trans[0], trans[1]))
      if len(data.pose) > 3 & ~self._placedObstacle:
        # we have an obstacle, so log
        obs_pose = data.pose[4]
        obs_position = obs_pose.position
        rospy.logInfo("BRASS | Obstacle | {},{}".format(obs_position.x, obs_position.y))
        self._placedObstacle = True
      elif self._placedObstacle:
	self._placedObstacle = False
        rospy.loginfo("BRASS | Obstacle | removed")  
    
if __name__ == '__main__':
  rospy.init_node('brass_logger',anonymous=True)
  logger = ChallengeProblemLogger('brass_logger')
  rospy.spin()    

